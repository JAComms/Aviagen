#########################################################################
#
# ESP828x and ESP32 Settings, common across all WiFi Connected Devices
#

substitutions:

###############################
# Location/Site Details:
#
   # The Aviagen site location, upon which this device is deployed. Used to populate a Text Sensor with this information.
  site: ""
   # Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Front Gate, Decontamination, Shed #  etc  
  location: ""
   # Location geographical height, in meters. Used for calculations in sensors such as BME280/BME680 and Water Tank sensors.
   # Averages: Tirrannaville (656), Bowral (668), Goulburn (673) and Wagga Wagga (?). Average = 666m.
  location_height: "666"
   # The phase in the locations power supply, upon which this device is utilsed. 1p = A. 3p = A, B or C.  (GPO 1 = Phase A, GPO 2 = Phase B, GPO 3 = Phase C).
   # Used to populate a Text Sensor with this information, that may be used to loadshed in future, or trace outages to electrical faults.
  power_circuit: "TBA"
   # Asset Tag Details:
  asset_id: ""

###############################
# Time Update Settings:
#
   # Set timezone of the smart plug. Useful if the plug is in a location different to the HA server. Can be entered in unix Country/Area format (i.e. "Australia/Sydney")
  timezone: "Australia/Sydney"
   # Set the duration between the sntp service polling pool.ntp.org servers for updates
  sntp_update_interval: 6h
   # Network time servers for your region, enter from lowest to highest priority
  sntp_server_1: "0.au.pool.ntp.org"
  sntp_server_2: "1.au.pool.ntp.org"
  sntp_server_3: "2.au.pool.ntp.org"


###############################
# Network Settings
#
   # Enable or disable the use of IPv6 networking on the device
  ipv6_enable: "false"

###############################
# Network Settings - Static IP
#
   # Network - Static IP - Address  
  network_ip: ""
   # Network - Static IP - Gateway
  network_gateway: ""
   # Network - Static IP - Subnet Mask
  network_subnet: ""
   # Network - Static IP - DNS Servers
  dns_server1: ""
  dns_server2: ""
   # Define a domain for this device to use. i.e. iot.home.lan (so device will appear as athom-smart-plug-v2.iot.home.lan in DNS/DHCP logs)
  dns_domain: ""

##########################
# Device Settings:
#  
   # Set the update interval for sensors  
  sensor_update_interval: 10s   
   # Define logging level: NONE, ERROR, WARN, INFO, DEBUG (Default), VERBOSE, VERY_VERBOSE
  log_level: "INFO"
 

########################## End of Substitutions #########################

esphome:
   # Configures these settings to use the substitutions defined below
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: '${device_description}'
  area: "${location}"
  name_add_mac_suffix: true
  min_version: 2024.6.0
  project:
    name: "${project_name}"
    version: "${project_version}"

#########################################################################

preferences:
   # Enable to allow storing of 'Read Total' between reboots and flashing. Only used be ESP82xx devices
  flash_write_interval: 5min

api:

ota:
  - platform: esphome
  
logger:
  level: ${log_level}
  baud_rate: 0
  logs:
    component: ERROR # Fix for issue #4717 "Component xxxxxx took a long time for an operation"

mdns:
  disabled: false

   # Enable local webserver on ESP Device
web_server:
   # TCP Port the webserver operates upon
  port: 80
   # Webserver version (default is 2).
  version: 3
   # Require BASIC authentication to access local webserver
#  auth:
#    username: !secret web_server_username
#    password: !secret web_server_password

network:
  enable_ipv6: ${ipv6_enable}

#########################################################################
#
# Remote Packages to be utilised
#

# dashboard_import:
#  package_import_url: github://roving-ronin/aviagen/esphome/common/base-configuration.yaml@main
#  import_full_config: false

#packages:
#  device_base: !include common/base-configuration-wifi.yaml
#  device_version: !include common/everything-presence-one-sen0395-stable.yaml
#  sen0395_base: !include common/sen0395-common.yaml


#########################################################################
#
# Global Variables - Used to store a STATE, or share across multiple lambdas.
#
globals:
  - id: location_altitude
    type: float
    initial_value: ${location_height}

#########################################################################
#
# Binary Sensors
#

binary_sensor:
  - platform: status
    name: "Device Status"
    id: device_status
    icon: "mdi:check-network-outline"
    entity_category: diagnostic
    web_server_sorting_weight: 10

##########################################################################
#
# Sensors
#

sensor:

   # Sensor uptime in seconds
  - platform: uptime
    name: "Uptime Seconds"
    id: uptime_seconds
#    update_interval: 30s
    entity_category: diagnostic
    internal: True

##########################################################################
#
# Buttons - To trigger actions, such as reboot, reset
#

button:
  - platform: restart
    name: 'Restart Device'
    entity_category: config
    web_server_sorting_weight: 1

  - platform: safe_mode
    name: "Safe Mode"
    internal: false
    entity_category: config
    web_server_sorting_weight: 2

  - platform: factory_reset
    name: Reset with Default Settings
    id: Reset
    entity_category: config
    web_server_sorting_weight: 3

##########################################################################
#
# Text Sensors
#

text_sensor:

   # Creates a sensor showing when the device was last restarted
  - platform: template
    name: 'Device Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic
    web_server_sorting_weight: 12

   # Creates a sensor of the name of installed project
  - platform: template
    name: 'Project Name'
    id: project_name
    icon: "mdi:label-outline"
    entity_category: diagnostic
    lambda: |-
      return {"${project_name}"};
    update_interval: 6h
    web_server_sorting_weight: 30

   # Creates a sensor of the version of installed project
  - platform: template
    name: 'Project Version'
    id: project_version
    icon: "mdi:label-outline"
    entity_category: diagnostic
    lambda: |-
      return {"${project_version}"};
    update_interval: 6h
    web_server_sorting_weight: 31

  #  Creates a sensor showing the Aviagen Asset Tag ID of the device
  - platform: template
    name: 'Site Location'
    id: site_location
    icon: "mdi:map-marker-radius"
    entity_category: diagnostic
    lambda: |-
      return {"${site}"};
    update_interval: 6h
    web_server_sorting_weight: 40

  #  Creates a sensor showing the Aviagen Asset Tag ID of the device
  - platform: template
    name: 'Asset Tag'
    id: asset_tag
    icon: "mdi:tag"
    entity_category: diagnostic
    lambda: |-
      return {"${asset_id}"};
    update_interval: 6h
    web_server_sorting_weight: 42

  #  Creates a sensor showing power circuit / phase of the device
  - platform: template
    name: 'Power Circuit'
    id: power_circuit
    icon: "mdi:electric-switch"
    entity_category: diagnostic
    lambda: |-
      return {"${power_circuit}"};
    update_interval: 6h
    web_server_sorting_weight: 43
    
   # Creates a sensor of the uptime of the device, in formatted days, hours, minutes and seconds
   # from : https://community.home-assistant.io/t/uptime-sensor-in-hours-or-days/116392/29
  - platform: template
    name: "Device Uptime"
    entity_category: diagnostic
    icon: mdi:clock-start
    lambda: |-
      int seconds = (id(uptime_seconds).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    web_server_sorting_weight: 11

##########################################################################
#
# Time Sync Funtion - sync using STNP time servers
#

   # Updates the system time using SNTP. Upon boot also publishes when the device was started.
time:
  - platform: sntp
    id: sntp_time
  # Define the timezone of the device
    timezone: "${timezone}"
  # Change sync interval from default 5min
    update_interval: ${sntp_update_interval}
  # Set specific sntp servers to use
    servers: 
      - "${sntp_server_1}"
      - "${sntp_server_2}"
      - "${sntp_server_3}"
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
