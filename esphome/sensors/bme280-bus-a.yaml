#########################################################################
#
# Pacakge to configure the use of a device with a BME280 sensor
#

#########################################################################
#
# Substitutions
#
substitutions:
   # BME 280 / BME680 Sensor
   # Location of BME280/680 Sensor #1. Used to prefix sensor if there are two. Leave empty if only 1. Add a " - " to the end of each entry if used.
  bme_sensor1_location: ""
   # Calibrate the outpute of the temperature sensor(s).
  temperature_1_offset: "0.0"
   # Calibrate the outpute of the pressure sensor(s).
  pressure_1_offset: "0.0"
   # Calibrate the outpute of the humidity sensor(s).
  humidity_1_offset: "0.0"
  
########################## End of Substitutions #########################
#
# Configure the i2c bus, to find and operate the BME280 sensor
#

i2c:
  - id: bus_a
    sda: ${bus_a_sda_pin}
    scl: ${bus_a_scl_pin}
    scan: true
    frequency: ${bus_a_frequency}

#########################################################################
#
# Sensors - Specific to the BME280 sensor, on i2C Bus A.
#

sensor:

  # BME280 Sensor in I2C Bus A
  - platform: bme280_i2c
    i2c_id: bus_a
    address: 0x76
    update_interval: 10s

     # Temperature in °C
    temperature:
      name: "${bme_sensor1_location}Temperature"
      id: bme280a_temperature
      accuracy_decimals: 1
      filters:
        offset: ${temperature_1_offset}
      icon: mdi:temperature-celsius
      web_server_sorting_weight: 4

     # Relative humidity %
    humidity:
      name: "${bme_sensor1_location}Humidity (Relative)"
      id: bme280a_humidity
      accuracy_decimals: 1
      filters:
        offset: ${humidity_1_offset}
      icon: mdi:water-percent
      web_server_sorting_weight: 5

     # Pressure in hPa
    pressure:
      name: "${bme_sensor1_location}Pressure"
      id: bme280a_pressure
      accuracy_decimals: 1
      filters:
        offset: ${pressure_1_offset}
      icon: mdi:gauge
      web_server_sorting_weight: 8
    
   # Pressure in kPa
#  - platform: template
#    name: "${bme_sensor1_location}Pressure (kPa)"
#    state_class: 'measurement'
#    accuracy_decimals: 2
#    lambda: |-
#      return id(bme280a_pressure).state / 10.0 ;
#    update_interval: 15s
#    unit_of_measurement: 'kPa'

   # BME280 Sensor in I2C Port - Absolute Humidity
  - platform: absolute_humidity
    name: "${bme_sensor1_location}Humidity (Absolute)"
    temperature: bme280a_temperature
    humidity: bme280a_humidity
    equation: Wobus   # Wobus (Default), optional Tetens or Buck
    icon: mdi:water-percent
    web_server_sorting_weight: 6
   
   # BME280 Sensor in I2C Port - Dew Point
  - platform: template
    name: "${bme_sensor1_location}Dew Point"
    unit_of_measurement: °C
#    state_class: 'measurement'
    icon: mdi:thermometer-water
    lambda: |-
      return (243.5*(log(id(bme280a_humidity).state/100)+((17.67*id(bme280a_temperature).state)/
      (243.5+id(bme280a_temperature).state)))/(17.67-log(id(bme280a_humidity).state/100)-
      ((17.67*id(bme280a_temperature).state)/(243.5+id(bme280a_temperature).state))));
    web_server_sorting_weight: 7

   # BME280 Sensor in I2C Port - Equivalent Sea Level Pressure 
   # Note: This is based on 655m for Goulburn North, NSW. Australia. Update for a different location.
  - platform: template
    name: "${bme_sensor1_location}Equivalent Sea Level Pressure"
    unit_of_measurement: 'hPa'
    lambda: |-
      return id(bme280a_pressure).state / powf(1 - ((0.0065 * id(location_altitude)) /
       (id(bme280a_temperature).state + (0.0065 * id(location_altitude)) + 273.15)), 5.257); // in hPa
#    state_class: 'measurement'
#    lambda: |-
#      const float STANDARD_ALTITUDE = 656; // in meters, see note
#      return id(bme280a_pressure).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /
#        (id(bme280a_temperature).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257); // in hPa
    update_interval: 15s
    icon: mdi:gauge
    web_server_sorting_weight: 9


   # Note: Only Altitude OR Equivalent Sea Level Pressure can be run at one time, not both.
#  - platform: template
#    name: "BME280 - Altitude"
#    unit_of_measurement: 'm'
#    icon: 'mdi:signal'
#    lambda: |-
#      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
#      return ((id(bme280a_temperature).state + 273.15) / 0.0065) *
#        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme280a_pressure).state), 0.190234) - 1); // in meter
#    update_interval: 15s

#########################################################################
